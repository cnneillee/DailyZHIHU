buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'org.greenrobot.greendao'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def static getApiKey() {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('fabric.properties')))
    return props['apiKey']
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [fabric_api_key: getApiKey()]
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 移除无用的resource文件
            shrinkResources true
            manifestPlaceholders = [fabric_api_key: getApiKey()]
        }
    }
    lintOptions{
        checkReleaseBuilds false
        abortOnError false
        warning 'InvalidPackage'
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
    dependencies {

        compile fileTree(include: ['*.jar'], dir: 'libs')
        testCompile 'junit:junit:4.12'

        // base
        compile rootProject.ext.dependencies["appcompat-v7"]
        compile rootProject.ext.dependencies["design"]
        compile rootProject.ext.dependencies["cardview-v7"]

        // network
        compile rootProject.ext.dependencies["gson"]
        compile rootProject.ext.dependencies["volley"]
        compile rootProject.ext.dependencies["okhttp"]
        compile rootProject.ext.dependencies["retrofit"]
        compile rootProject.ext.dependencies["retrofit-converter-gson"]
        compile rootProject.ext.dependencies["universal-image-loader"]

        // ui
        compile rootProject.ext.dependencies["android-observablescrollview"]
        compile rootProject.ext.dependencies["nineoldandroids"]
        compile rootProject.ext.dependencies["circleimageview"]
        compile rootProject.ext.dependencies["material-calendarview"]
        compile('cn.trinea.android.view.autoscrollviewpager:android-auto-scroll-view-pager:1.1.2') {
            exclude module: 'support-v4'
        }
//        compile 'com.mikepenz:actionitembadge:3.3.1@aar'

        // log
        compile rootProject.ext.dependencies["logger"]
        compile rootProject.ext.dependencies["crashreport"]

        // di
        compile rootProject.ext.dependencies["dagger"]
        provided rootProject.ext.dependencies["dagger-compiler"]
        provided rootProject.ext.dependencies["annotation"]
        compile rootProject.ext.dependencies["butterknife"]
        apt rootProject.ext.dependencies["butterknife-compiler"]

        // rx
        compile rootProject.ext.dependencies["rxjava"]
        compile rootProject.ext.dependencies["rxandroid"]

        // db
        compile 'org.greenrobot:greendao:3.2.2'

        compile('com.crashlytics.sdk.android:crashlytics:2.2.0@aar') {
            transitive = true;
        }
    }
}

